// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id                String      @id @default(uuid())
  email             String      @unique
  mot_de_passe_hash String
  nom               String?
  prénom            String?
  créé_le           DateTime    @default(now())
  modifié_le        DateTime    @updatedAt
  userResto         UserResto[]
}

model Client {
  id          String      @id @default(uuid())
  nom         String
  téléphone   String
  email       String?
  adresse     String
  créé_le     DateTime    @default(now())
  modifié_le  DateTime    @updatedAt
  commandes   Commande[]
}

model Restaurant {
  id                     String        @id @default(uuid())
  nom                    String
  slug                   String        @unique
  type                   String
  logo_url               String?
  bannière_url           String?
  min_commande           Decimal?      @default(0)
  whatsapp_commande      Boolean       @default(false)
  notifications_sonores  Boolean       @default(true)
  étape_configuration    Int           @default(1)
  créé_le                DateTime      @default(now())
  modifié_le             DateTime      @updatedAt

  abonnement             Abonnement?
  menus                  Menu[]
  catégories             Catégorie[]
  livreurs               Livreur[]
  commandes              Commande[]
  userResto              UserResto[]
  profil                 Profil?
  lieux                  Lieu[]
  paiement               Paiement?
  horaires               Horaire[]
}

model Abonnement {
  id               String     @id @default(uuid())
  restaurant       Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  restaurant_id    String     @unique
  type             String     // 'gratuit', 'basique', 'premium'
  statut           String     // 'actif', 'inactif', 'en_attente'
  date_début       DateTime
  date_fin         DateTime
  créé_le          DateTime   @default(now())
  modifié_le       DateTime   @updatedAt
}

model Rôle {
  id            String      @id @default(uuid())
  nom           String      @unique // 'propriétaire', 'gérant', 'employé'
  permissions   String[]    // ['menus.lire', 'menus.écrire', 'commandes.lire', etc.]
  userResto     UserResto[]
}

model UserResto {
  user_id        String
  restaurant_id  String
  rôle_id        String
  créé_le        DateTime   @default(now())

  utilisateur    Utilisateur @relation(fields: [user_id], references: [id], onDelete: Cascade)
  restaurant     Restaurant  @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  rôle           Rôle        @relation(fields: [rôle_id], references: [id])

  @@id([user_id, restaurant_id])
}

model Catégorie {
  id              String    @id @default(uuid())
  restaurant      Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  restaurant_id   String
  nom             String
  description     String?
  ordre           Int       @default(0)
  actif           Boolean   @default(true)
  menus           Menu[]
  créé_le         DateTime  @default(now())
  modifié_le      DateTime  @updatedAt
}

model Menu {
  id              String     @id @default(uuid())
  restaurant      Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  restaurant_id   String
  catégorie       Catégorie? @relation(fields: [catégorie_id], references: [id])
  catégorie_id    String?
  nom             String
  description     String?
  prix            Decimal
  image_url       String?
  actif           Boolean    @default(true)
  options         Option[]
  détails_commande DétailCommande[]
  créé_le         DateTime   @default(now())
  modifié_le      DateTime   @updatedAt
}

model Option {
  id              String    @id @default(uuid())
  menu            Menu      @relation(fields: [menu_id], references: [id], onDelete: Cascade)
  menu_id         String
  nom             String
  prix_supplément Decimal   @default(0)
  créé_le         DateTime  @default(now())
  modifié_le      DateTime  @updatedAt
}

model Commande {
  id              String          @id @default(uuid())
  restaurant      Restaurant      @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  restaurant_id   String
  client          Client          @relation(fields: [client_id], references: [id])
  client_id       String
  statut          String          // 'en_attente', 'en_préparation', 'assignée', 'livrée', 'annulée'
  total           Decimal
  frais_livraison Decimal         @default(0)
  notes           String?
  mode_paiement   String?         // 'espèce', 'cb', 'paypal'
  statut_paiement String?         // 'payé', 'en_attente', 'remboursé'
  livreur         Livreur?        @relation(fields: [livreur_id], references: [id])
  livreur_id      String?
  détails         DétailCommande[]
  créé_le         DateTime        @default(now())
  modifié_le      DateTime        @updatedAt
}

model DétailCommande {
  id              String    @id @default(uuid())
  commande        Commande  @relation(fields: [commande_id], references: [id], onDelete: Cascade)
  commande_id     String
  menu            Menu      @relation(fields: [menu_id], references: [id])
  menu_id         String
  quantité        Int
  prix_unitaire   Decimal
  options         String?   // Stockées en JSON
  notes           String?
  créé_le         DateTime  @default(now())
  modifié_le      DateTime  @updatedAt
}

model Livreur {
  id              String     @id @default(uuid())
  restaurant      Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  restaurant_id   String
  nom             String
  téléphone       String
  email           String?
  actif           Boolean    @default(true)
  commandes       Commande[]
  créé_le         DateTime   @default(now())
  modifié_le      DateTime   @updatedAt
}

model Paiement {
  restaurant_id   String     @id
  restaurant      Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  livraison       Boolean    @default(true)
  frais_livraison Decimal    @default(0)
  min_commande    Decimal    @default(0)
  espèce          Boolean    @default(true)
  cb              Boolean    @default(false)
  paypal          Boolean    @default(false)
  email_paypal    String?
  clé_api_cb      String?
  créé_le         DateTime   @default(now())
  modifié_le      DateTime   @updatedAt
}

model Profil {
  restaurant_id   String     @id
  restaurant      Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  nom_gérant      String?
  téléphone       String?
  email           String?
  langue          String     @default("fr")
  facebook        String?
  instagram       String?
  site_web        String?
  créé_le         DateTime   @default(now())
  modifié_le      DateTime   @updatedAt
}

model Lieu {
  id              String     @id @default(uuid())
  restaurant      Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  restaurant_id   String
  nom             String
  whatsapp        String?
  adresse         String
  latitude        Float?
  longitude       Float?
  principal       Boolean    @default(false)
  actif           Boolean    @default(true)
  horaires        Horaire[]
  créé_le         DateTime   @default(now())
  modifié_le      DateTime   @updatedAt
}

model Horaire {
  id               String     @id @default(uuid())
  restaurant       Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  restaurant_id    String
  lieu             Lieu?      @relation(fields: [lieu_id], references: [id], onDelete: Cascade)
  lieu_id          String?
  jour_semaine     Int        // 0-6 (Dimanche-Samedi)
  activé           Boolean    @default(true)
  heure_ouverture  String     // Format "HH:MM"
  heure_fermeture  String     // Format "HH:MM"
  créé_le          DateTime   @default(now())
  modifié_le       DateTime   @updatedAt
}